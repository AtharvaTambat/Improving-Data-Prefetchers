#include "cache.h"
#include <bits/stdc++.h> // for using INT_MAX

long long unsigned int freq[LLC_SET][LLC_WAY]; // freq[][]- stores the frequency of accesses of the cache lines

void CACHE::llc_initialize_replacement()
{
    cout << "Initializing the frequency of accesses of cache line" << endl;

    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<LLC_WAY; j++) {
            freq[i][j] = 0;
        }
    }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t way = 0;
    long long unsigned int min_freq = -1;

    // fill invalid line first
    for (way=0; way<NUM_WAY; way++) {
        if (block[set][way].valid == false) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });

            break;
        }
    }
    if(way < NUM_WAY){return way;}

    // Searching through the access frequency to find the minimum of all
    for(int i = 0;i<LLC_WAY;i++){
    	if (freq[set][i] < min_freq){
		way = i;			// update the way and minimum frequency
		min_freq = freq[set][i];
	}
    }
   
    return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;
    
    // Update the frequency of the cache line if hit
    if(hit){
	freq[set][way]++; // check for overflow
    }
    // Set the frequency of the cache line to 0 if miss
    else{
	freq[set][way] = 0;
    }
}
 

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

}

